//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace ConvexDecomposition {

public class ConvexHull : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ConvexHull(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ConvexHull obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ConvexHull() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VHACDBridge.delete_ConvexHull(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

	public double[] m_points
	{
		get
		{
			double[] ret = new double[m_nPoints * 3];
			for (uint i = 0u; i < ret.Length; i++)
			{
				ret[i] = GetPoint(i);
			}
			return ret;
		}
	}

	public int[] m_triangles
	{
		get
		{
			int[] ret = new int[m_nTriangles * 3];
			for (uint i = 0u; i < ret.Length; i++)
			{
				ret[i] = GetTriangle(i);
			}
			return ret;
		}
	}

	public double[] m_center
	{
		get
		{
			double[] ret = new double[3];
			for (uint i = 0u; i < ret.Length; i++)
			{
				ret[i] = GetCenter(i);
			}
			return ret;
		}
	}

  public uint m_nPoints {
    get {
      uint ret = VHACDBridge.ConvexHull_m_nPoints_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_nTriangles {
    get {
      uint ret = VHACDBridge.ConvexHull_m_nTriangles_get(swigCPtr);
      return ret;
    } 
  }

  public double m_volume {
    get {
      double ret = VHACDBridge.ConvexHull_m_volume_get(swigCPtr);
      return ret;
    } 
  }

  private double GetPoint(uint pos) {
    double ret = VHACDBridge.ConvexHull_GetPoint(swigCPtr, pos);
    return ret;
  }

  private int GetTriangle(uint pos) {
    int ret = VHACDBridge.ConvexHull_GetTriangle(swigCPtr, pos);
    return ret;
  }

  private double GetCenter(uint pos) {
    double ret = VHACDBridge.ConvexHull_GetCenter(swigCPtr, pos);
    return ret;
  }

  public ConvexHull() : this(VHACDBridge.new_ConvexHull(), true) {
  }

}

}
